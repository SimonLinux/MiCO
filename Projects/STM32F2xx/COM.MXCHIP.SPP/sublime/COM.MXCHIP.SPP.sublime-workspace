{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"mico_rtos_th",
				"mico_rtos_delete_thread(mico_thread_t *thread)	OSStatus"
			],
			[
				"t",
				"ttl	uint32_t"
			],
			[
				"mico_th",
				"mico_thread_t	typedef"
			],
			[
				"mico",
				"mico_gpio_t	typedef"
			],
			[
				"p",
				"peripheral_clock_reg	uint32_t"
			],
			[
				"re",
				"require_noerr(ERR, LABEL)	macro"
			],
			[
				"require_ac",
				"require_action_quiet(X, LABEL, ACTION)	macro"
			],
			[
				"SPIX",
				"SPIX_AF	macro"
			],
			[
				"platform_po",
				"platform_mcu_powersave_enable()	OSStatus"
			],
			[
				"platform_g",
				"platform_gpio_enable(const platform_gpio_t *gpio)	OSStatus"
			],
			[
				"platform_w",
				"platform_watchdog_kick()	OSStatus"
			],
			[
				"req",
				"require_noerr(ERR, LABEL)	macro"
			],
			[
				"ch",
				"chunkedDataBufferLen	unsigned int"
			],
			[
				"c",
				"onClearCallback	OSStatus (*)(struct _HTTPHeader_t *, void *)"
			],
			[
				"kUn",
				"kUnknownErr	macro"
			],
			[
				"uint",
				"uint32_t	typedef"
			],
			[
				"o",
				"onReceivedDataCallback	bool (*)(struct _HTTPHeader_t *)"
			],
			[
				"wla",
				"wLanUnConfigured	Config_State_t"
			],
			[
				"WL_",
				"WL_GPIO1_PIN	macro"
			],
			[
				"platform",
				"platform_log(M, ...)	macro"
			],
			[
				"pi",
				"pin_rx	const platform_pin_mapping_t *"
			],
			[
				"MicoGpio",
				"MicoGpioEnableIRQ(mico_gpio_t gpio, mico_gpio_irq_trigger_t trigger, mico_gpio_irq_handler_t handler, void *arg)	OSStatus"
			],
			[
				"MicoGP",
				"MicoGpioEnableIRQ(mico_gpio_t gpio, mico_gpio_irq_trigger_t trigger, mico_gpio_irq_handler_t handler, void *arg)	OSStatus"
			],
			[
				"OUTPUT_OD",
				"OUTPUT_OPEN_DRAIN_NO_PULL	mico_gpio_config_t"
			],
			[
				"MICOSYS",
				"MicoSystemStandBy()	void"
			],
			[
				"MicoWd",
				"MicoWdgInitialize(uint32_t timeout)	OSStatus"
			],
			[
				"MicoR",
				"MicoRtcSetTime(mico_rtc_time_t *time)	OSStatus"
			],
			[
				"m",
				"month	uint8_t"
			],
			[
				"MICO_I",
				"MICO_I2C_CP	macro"
			],
			[
				"ke",
				"keyLength	int"
			],
			[
				"s",
				"security	SECURITY_TYPE_E"
			],
			[
				"MicoGpioO",
				"MicoGpioOutputLow(mico_gpio_t gpio)	OSStatus"
			],
			[
				"k",
				"kBackoffErr	macro"
			],
			[
				"mico_rtos_in",
				"mico_rtos_init_semaphore(mico_semaphore_t *semaphore, int count)	OSStatus"
			],
			[
				"tm",
				"tm_wday	int"
			],
			[
				"tm_m",
				"tm_mon	int"
			],
			[
				"tm_",
				"tm_mday	int"
			],
			[
				"mico_rtos_d",
				"mico_rtos_delete_thread(mico_thread_t *thread)	OSStatus"
			],
			[
				"MICORe",
				"MICORemoveNotification(mico_notify_types_t notify_type, void *functionAddress)	OSStatus"
			],
			[
				"I",
				"INADDR_ANY	macro"
			],
			[
				"MICOWlan",
				"MICOWlanEnablePowerSave	macro"
			],
			[
				"MICOWlanS",
				"MICOWlanStopEasyLink	macro"
			],
			[
				"MICOW",
				"MICOWlanGetIPStatus	macro"
			],
			[
				"MICOWl",
				"MICOWlanGetIPStatus	macro"
			],
			[
				"MICOWlanGe",
				"MICOWlanGetIPStatus	macro"
			],
			[
				"MICOWlanStart",
				"MICOWlanStartAdv	macro"
			],
			[
				"MICO",
				"MICO_NO_WAIT	macro"
			],
			[
				"micoGet",
				"micoGetMemoryInfo	macro"
			],
			[
				"DEF",
				"DEFAULT_REMOTE_UDP_PORT	macro"
			],
			[
				"send",
				"sendto(int sockfd, const void *buf, unsigned int len, int flags, const struct sockaddr_t *dest_addr, socklen_t addrlen)	int"
			],
			[
				"DHCP",
				"DHCP_Disable	DHCPOperationMode"
			],
			[
				"DHC",
				"DHCP_Client	DHCPOperationMode"
			],
			[
				"b",
				"BundleSeedID	char [32]"
			],
			[
				"ma",
				"manufacturer	char [32]"
			],
			[
				"n",
				"name	char [32]"
			],
			[
				"uin",
				"uint8_t	typedef"
			],
			[
				"Platform",
				"PlatformWDGReload()	void"
			],
			[
				"RE",
				"REMOTE_CONNECT	enum <anonymous>"
			],
			[
				"_us",
				"_uart_send_mutex	mico_mutex_t"
			],
			[
				"requi",
				"require(X, LABEL)	macro"
			],
			[
				"_uart",
				"_uart_send_mutex	mico_mutex_t"
			],
			[
				"mico_rtos_init_s",
				"mico_rtos_init_semaphore(mico_semaphore_t *semaphore, int count)	MxchipStatus"
			],
			[
				"mico_rtosge",
				"mico_rtos_get_semaphore(mico_semaphore_t *semaphore, unsigned int timeout_ms)	MxchipStatus"
			],
			[
				"MICO_",
				"MICO_NEVER_TIMEOUT	macro"
			],
			[
				"eState_",
				"eState_Wlan_Powerdown	SYS_State_t"
			],
			[
				"plat",
				"PlatformUartIn"
			],
			[
				"memc",
				"memcmp(const void *, const void *, size_t)	int"
			],
			[
				"mico_rtos",
				"mico_rtos_init_mutex(mico_mutex_t *mutex)	MxchipStatus"
			],
			[
				"mico_t",
				"mico_mutex_t	typedef"
			],
			[
				"mico_rt",
				"mico_rtos_set_semaphore(mico_semaphore_t *semaphore)	MxchipStatus"
			],
			[
				"DE",
				"DEAFULT_REMOTE_SERVER	macro"
			],
			[
				"fl",
				"flashContentInRam	flash_content_t"
			],
			[
				"kNo",
				"kNoErr	macro"
			],
			[
				"lo",
				"localTcpClient_fd	int *"
			],
			[
				"PlatformFlash",
				"PlatformFlashWrite(volatile uint32_t *FlashAddress, uint32_t *Data, uint32_t DataLength)	OSStatus"
			],
			[
				"Platformf",
				"PlatformFlashInitialize()	OSStatus"
			],
			[
				"kc",
				"kChecksumErr	macro"
			],
			[
				"kun",
				"kUnknownErr	macro"
			],
			[
				"kC",
				"kChecksumErr	macro"
			],
			[
				"f",
				"flashContentInRam	flash_content_t"
			],
			[
				"fla",
				"flashContentInRam	flash_content_t"
			],
			[
				"mico_l",
				"mico_log(M, ...)	macro"
			],
			[
				"Button_STANDBY_",
				"Button_STANDBY_PIN	macro"
			],
			[
				"GPIO_Read",
				"GPIO_ReadInputDataBit(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)	uint8_t"
			],
			[
				"easylink",
				"easylinkClient_fd	int"
			],
			[
				"mico_rtos_set",
				"mico_rtos_set_semaphore(mico_semaphore_t *semaphore)	MxchipStatus"
			],
			[
				"es",
				"eState_Software_Reset	SYS_State_t"
			],
			[
				"mico_rtos_init_",
				"mico_rtos_init_semaphore(mico_semaphore_t *semaphore, int count)	MxchipStatus"
			],
			[
				"mico_s",
				"mico_semaphore_t	typedef"
			],
			[
				"e",
				"easyLinkSkip	bool"
			],
			[
				"require_noerr",
				"require_noerr_action(ERR, LABEL, ACTION)	macro"
			],
			[
				"DH",
				"DHCP_Client	DHCPOperationMode"
			],
			[
				"kn",
				"kNoErr	macro"
			],
			[
				"requ",
				"require(X, LABEL)	macro"
			],
			[
				"l",
				"localIp	char [16]"
			],
			[
				"ip",
				"local_ip_addr	char [16]"
			],
			[
				"int",
				"int32_t	typedef"
			],
			[
				"d",
				"dhcpEnable	bool"
			],
			[
				"inet",
				"inet_ntoa(char *s, unsigned int x)	char *"
			],
			[
				"a",
				"allConfigured	config_type"
			],
			[
				"Clos",
				"CloseEasylink2()	int"
			],
			[
				"mico_notify_WIFI_S",
				"mico_notify_WIFI_STATUS_CHANGED	mico_notify_types_t"
			],
			[
				"us",
				"user_key	char [64]"
			],
			[
				"u",
				"user_key	char [64]"
			],
			[
				"key",
				"key_len	int"
			],
			[
				"MX",
				"MXCHIP_SUCCESS	MxchipStatus"
			],
			[
				"require_",
				"require_action(X, LABEL, ACTION)	macro"
			],
			[
				"strn",
				"strncpy(char *restrict, const char *restrict, size_t)	char *"
			],
			[
				"__str",
				"__strdup_trans_dot(char *src)	char *"
			],
			[
				"temp",
				"temp2	WiFi_Status_Notify *"
			],
			[
				"kOper",
				"kNotPreparedErr	macro"
			],
			[
				"mico_rtos_i",
				"mico_rtos_init_mutex(mico_mutex_t *mutex)	MxchipStatus"
			],
			[
				"kU",
				"kUnknownErr	macro"
			],
			[
				"in",
				"inContext"
			],
			[
				"mico_rtos_ge",
				"mico_rtos_get_semaphore(mico_semaphore_t *semaphore, unsigned int timeout_ms)	MxchipStatus"
			],
			[
				"MF",
				"MFi_SERVICE_MFi	macro"
			],
			[
				"mico_rtos_de",
				"mico_rtos_delete_thread(mico_thread_t *thread)	MxchipStatus"
			],
			[
				"mico_re",
				"mico_rtos_init_mutex(mico_mutex_t *mutex)	MxchipStatus"
			],
			[
				"E",
				"ENABLE	FunctionalState"
			],
			[
				"ea",
				"eaBundleSeedID	char *"
			],
			[
				"support",
				"supports5GHzWiFi	bool"
			],
			[
				"supportsAirp",
				"supportsAirPrint	bool"
			],
			[
				"w",
				"supportsWakeOnWireless	bool"
			],
			[
				"wi",
				"wifi_key	char [32]"
			],
			[
				"WAC_N",
				"WAC_NetConfig	network_InitTypeDef_st *"
			],
			[
				"de",
				"destinationSSID	char*"
			],
			[
				"page",
				"pagesNumber	uint8_t"
			],
			[
				"CP_",
				"CP_I2C_RETRY_TIMES	macro"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/Users/William/Develop/MiCO/Demos/COM.MXCHIP.SPP/mico_system_config.h",
			"settings":
			{
				"buffer_size": 3628,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/William/Develop/MiCO/Demos/COM.MXCHIP.SPP/mico_app_context.h",
			"settings":
			{
				"buffer_size": 1776,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 1900 files for \"UART_WAKEUP_ENABLE\" (whole word)\n\n/Users/William/Develop/MiCO/include/MicoDrivers/MicoDriverUart.h:\n   80  #define UART_WAKEUP_MASK_POSN   0\n   81  #define UART_WAKEUP_DISABLE    (0 << UART_WAKEUP_MASK_POSN) /**< UART can not wakeup MCU from stop mode */\n   82: #define UART_WAKEUP_ENABLE     (1 << UART_WAKEUP_MASK_POSN) /**< UART can wake up MCU from stop mode */\n   83  \n   84  \n   ..\n   94  //     mico_uart_stop_bits_t     stop_bits;\n   95  //     mico_uart_flow_control_t  flow_control;\n   96: //     uint8_t                   flags;          /**< if set, UART can wake up MCU from stop mode, reference: @ref UART_WAKEUP_DISABLE and @ref UART_WAKEUP_ENABLE*/\n   97  // } mico_uart_config_t;\n   98  \n\n/Users/William/Develop/MiCO/Platform/include/platform_peripheral.h:\n  228      platform_uart_stop_bits_t    stop_bits;\n  229      platform_uart_flow_control_t flow_control;\n  230:     uint8_t                      flags;          /**< if set, UART can wake up MCU from stop mode, reference: @ref UART_WAKEUP_DISABLE and @ref UART_WAKEUP_ENABLE*/\n  231  } platform_uart_config_t;\n  232  \n\n/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/platform_uart.c:\n  164    \n  165  #ifndef NO_MICO_RTOS\n  166:   if(config->flags & UART_WAKEUP_ENABLE){\n  167      mico_rtos_init_semaphore( driver->sem_wakeup, 1 );\n  168      mico_rtos_create_thread(NULL, MICO_APPLICATION_PRIORITY, \"UART_WAKEUP\", thread_wakeup, 0x100, driver);\n\n/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_uart.c:\n  176    \n  177  #ifndef NO_MICO_RTOS\n  178:   if(config->flags & UART_WAKEUP_ENABLE){\n  179      mico_rtos_init_semaphore( driver->sem_wakeup, 1 );\n  180      mico_rtos_create_thread(NULL, MICO_APPLICATION_PRIORITY, \"UART_WAKEUP\", thread_wakeup, 0x100, driver);\n\n/Users/William/Develop/MiCO/Platform/vendor/Freescale/MK64FxxL12/MicoDriverUart.c:\n  169      configure_uart_pins(Instance); //BOARD_APP_UART_INSTANCE);\n  170  #ifndef NO_MICO_RTOS\n  171:   if(config->flags & UART_WAKEUP_ENABLE){\n  172      current_uart = uart;\n  173      mico_rtos_init_semaphore( &uart_interfaces[uart].sem_wakeup, 1 );\n\n/Users/William/Develop/MiCO/Platform/vendor/nxp/LPC54xx/MicoDriverUart.c:\n  233    \n  234  #ifndef NO_MICO_RTOS\n  235:   if(config->flags & UART_WAKEUP_ENABLE){\n  236      current_uart = uart;\n  237      mico_rtos_init_semaphore( &uart_interfaces[uart].sem_wakeup, 1 );\n\n/Users/William/Develop/MiCO/Platform/vendor/Sample/Sample01/MicoDriverUart.c:\n  137  #if ADD_OS_CODE\n  138  #ifndef NO_MICO_RTOS\n  139:   if(config->flags & UART_WAKEUP_ENABLE){\n  140      current_uart = uart;\n  141      mico_rtos_init_semaphore( &uart_interfaces[uart].sem_wakeup, 1 );\n\n/Users/William/Develop/MiCO/Demos/COM.MXCHIP.SPP/MICOAppEntrance.c:\n   75    uart_config.flow_control = FLOW_CONTROL_DISABLED;\n   76    if(inContext->flashContentInRam.micoSystemConfig.mcuPowerSaveEnable == true)\n   77:     uart_config.flags = UART_WAKEUP_ENABLE;\n   78    else\n   79      uart_config.flags = UART_WAKEUP_DISABLE;\n\n9 matches across 8 files\n",
			"settings":
			{
				"buffer_size": 3062,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/Users/William/Develop/MiCO/include/MicoDrivers/MicoDriverUart.h",
			"settings":
			{
				"buffer_size": 4881,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/william/Develop/MiCO/Platform/include/platform_peripheral.h",
			"settings":
			{
				"buffer_size": 24939,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 287.0,
		"selected_items":
		[
			[
				"",
				"Package Control: Install Package"
			],
			[
				"git",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"v",
				"View: Toggle Side Bar"
			],
			[
				"Cscope:Look up symbol",
				"Cscope: Look up symbol"
			],
			[
				":",
				"View: Toggle Tabs"
			],
			[
				":q",
				"Set Syntax: SQL"
			],
			[
				"Package Control: install		",
				"Package Control: Install Package"
			],
			[
				"Snippet: ",
				"Snippet: Lorem ipsum"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/William/Develop/MiCO/Demos/COM.MXCHIP.SPP/MiCOAPPDefine.h",
		"/Users/William/Develop/MiCO/include/mico_system_context.h",
		"/Users/William/Develop/MiCO/Demos/COM.MXCHIP.SPP/mico_app_context.h",
		"/Users/william/Develop/MiCO/MICO/system/system.h",
		"/Users/William/Develop/MiCO/Projects/STM32F2xx/COM.MXCHIP.SPP/sublime/COM.MXCHIP.SPP.sublime-project",
		"/Users/William/Develop/MiCO/include/mico_service.h",
		"/Users/William/Develop/MiCO/MICO/service/mico_service_mdns.c",
		"/Users/William/Develop/MiCO/MICO/service/MDNSUtils.h",
		"/Users/William/Develop/MiCO/MICO/system/system.h",
		"/Users/William/Develop/MiCO/MICO/system/system_misc.c",
		"/Users/William/Develop/MiCO/include/mico_system.h",
		"/Users/William/Develop/MiCO/include/mico.h",
		"/Users/William/Develop/MiCO/Demos/COM.MXCHIP.SPP/RemoteTcpClient.c",
		"/Users/William/Develop/MiCO/Demos/COM.MXCHIP.SPP/MICOAppDefine.h",
		"/Users/William/Develop/MiCO/include/mico_cli.h",
		"/Users/William/Develop/MiCO/MICO/service/mico_servce_cli.c",
		"/Users/William/Develop/MiCO/MICO/service/mico_service_ntp_client.c",
		"/Users/William/Develop/MiCO/MICO/system/mico_system.c",
		"/Users/William/Develop/MiCO/MICO/service/mico_service_config_server.c",
		"/Users/William/Develop/MiCO/MICO/MICONotificationCenter.h",
		"/Users/William/Develop/MiCO/MICO/system/mico_system_monitor.c",
		"/Users/William/Develop/MiCO/MICO/MICOConfigMenu.h",
		"/Users/William/Develop/MiCO/Demos/COM.MXCHIP.SPP/MICOAppEntrance.c",
		"/Users/William/Develop/MiCO/MICO/system/mico_system_power_daemon.c",
		"/Users/William/Develop/MiCO/MICO/system/mico_system_para_storage.c",
		"/Users/William/Develop/MiCO/include/MicoWlan.h",
		"/Users/William/Develop/MiCO/MICO/system/system_init.c",
		"/Users/William/Develop/MiCO/MICO/MICOSystemMonitor.h",
		"/Users/William/Develop/MiCO/MICO/MICOCli.c",
		"/Users/William/Develop/MiCO/MICO/system/mico_system_init.c",
		"/Users/William/Develop/MiCO/MICO/MICONTPClient.c",
		"/Users/William/Develop/MiCO/MICO/system/system_power_daemon.c",
		"/Users/William/Develop/MiCO/MICO/MICODefineddddd.h",
		"/Users/William/Develop/MiCO/MICO/system/mico_system_common.c",
		"/Users/William/Develop/MiCO/MICO/system/system_para_storage.c",
		"/Users/William/Develop/MiCO/MICO/MICOEntrance.c",
		"/Users/William/Develop/MiCO/MICO/MICOParaStorage.c",
		"/Users/william/Develop/MiCO/MICO/MICODefine.h",
		"/Users/William/Develop/MiCO/MICO/mico_system/mico_system_init.c",
		"/Users/william/Develop/MiCO/MICO/MICOCli.h",
		"/Users/William/Develop/MiCO/MICO/mico_system/mico_system_common.c",
		"/Users/william/Develop/MiCO/Demos/COM.MXCHIP.SPP/MICOAppDefine.h",
		"/Users/William/Develop/MiCO/MICO/mico_system/mico_system_internal.h",
		"/Users/William/Develop/MiCO/Demos/COM.MXCHIP.SPP/mico_system_config.h",
		"/Users/William/Develop/MiCO/MICO/mico_system/mico_system_easylink.c",
		"/Users/William/Develop/MiCO/MICO/mico_system/mico_system_easylink_wac.c",
		"/Users/William/Develop/MiCO/MICO/system/system_easylink.c",
		"/Users/William/Develop/MiCO/MICO/mico_system/mico_system_power_daemon.c",
		"/Users/william/Develop/MiCO/Platform/include/platform_peripheral.h",
		"/Users/William/Develop/MiCO/MICO/MICODefine.h",
		"/Users/William/Develop/MiCO/MICO/MICOForceOTA.c",
		"/Users/William/Develop/MiCO/MICO/MICOSystemMonitor.c",
		"/Users/William/Develop/MiCO/Support/MDNSUtils.c",
		"/Users/William/Develop/MiCO/MICO/MICOConfigServer.c",
		"/Users/William/Develop/MiCO/Demos/COM.MXCHIP.SPP/MICOConfigDelegate.c",
		"/Users/William/Develop/MiCO/MICO/mico_system/mico_system_platform.c",
		"/Users/william/Develop/MiCO/include/MicoWlan.h",
		"/Users/William/Develop/MiCO/Support/HTTPUtils.c",
		"/Users/william/Develop/MiCO/MICO/MICONotificationCenter.h",
		"/Users/William/Develop/MiCO/include/MICORTOS.h",
		"/Users/William/Develop/MiCO/Board/MiCOKit-F205/platform.c",
		"/Users/William/Develop/MiCO/include/MICO.h",
		"/Users/William/Develop/MiCO/Support/MDNSUtils.h",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3165/platform.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/platform_flash.c",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3162/platform_config.h",
		"/Users/William/Develop/MiCO/Board/MiCOKit-F205/platform_config.h",
		"/Users/William/Develop/MiCO/Demos/COM.MXCHIP.BASIC/os/os_timer.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/platform_mcu_powersave.c",
		"/Users/William/Develop/MiCO/Platform/Drivers/MiCOKit_EXT/micokit_ext.c",
		"/Users/William/Develop/MiCO/Platform/Drivers/MiCOKit_EXT/key/keys.c",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3162/platform.h",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3162/platform.c",
		"/Users/William/Develop/MiCO/Board/MiCOKit-F205/platform.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/platform_spi.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/EMW1062_Driver/wlan_bus_sdio.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/EMW1062_Driver/wlan_bus_spi.c",
		"/Users/William/Develop/MiCO/Platform/MCU/mico_platform_common.c",
		"/Users/William/Develop/MiCO/Platform/MCU/wlan_platform_common.c",
		"/Users/William/Develop/MiCO/Platform/include/wlan_platform_common.h",
		"/Users/william/Develop/MiCO/Platform/drivers/spi_flash/spi_flash_platform_interface.h",
		"/Users/William/Develop/MiCO/Board/MiCOKit-F205/platform_spi_flash.c",
		"/Users/William/Develop/MiCO/Platform/Drivers/spi_flash/spi_flash_platform.c",
		"/Users/William/Develop/MiCO/Platform/Drivers/spi_flash/spi_flash_platform_interface.h",
		"/Users/William/Develop/MiCO/include/MicoDrivers/MicoDriverSpi.h",
		"/Users/William/Develop/MiCO/Platform/Drivers/spi_flash/spi_flash.c",
		"/Users/william/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/platform_mcu_peripheral.h",
		"/Users/William/Develop/MiCO/include/MicoPlatform.h",
		"/Users/William/Develop/MiCO/include/MicoDrivers/MicoDriverRtc.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/platform_gpio.c",
		"/Users/william/Develop/MiCO/include/MicoDrivers/MICODriverSpi.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/Libraries/STM32F2xx_StdPeriph_Driver/src/stm32f2xx_dma.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/Libraries/STM32F2xx_StdPeriph_Driver/inc/stm32f2xx_dma.h",
		"/Users/William/Develop/MiCO/Platform/MCU/wlan_platform_common.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/platform_uart.c",
		"/Users/william/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/Libraries/STM32F2xx_StdPeriph_Driver/inc/stm32f2xx.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/EMW1062_Driver/SPI/wwd_bus.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/EMW1062_Driver/read_wifi_firmware.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/platform_rng.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/MicoDriverUart.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/MicoDriverWdg.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/MicoDriverUart.c",
		"/Users/William/Develop/MiCO/Platform/include/platform_peripheral.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/platform_mcu_peripheral.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/platform_init.c",
		"/Users/William/Develop/MiCO/include/Common.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/MicoDriverRtc.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/rtc.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/MicoDriverGpio.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/MicoDriverI2c.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/EMW1062_Driver/SDIO/wlan_bus.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/MicoDriverPwm.c",
		"/Users/William/Develop/MiCO/Demos/COM.Apple.HomeKit/HomeKitUserInterface.c",
		"/Users/William/Develop/MiCO/Demos/COM.Apple.HomeKit/HomeKitServer.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/MicoDriverAdc.c",
		"/Users/william/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/Libraries/STM32F2xx_StdPeriph_Driver/inc/stm32f2xx_syscfg.h",
		"/Users/William/Develop/MiCO/include/Debug.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/gpio_irq.h",
		"/Users/william/Develop/MiCO/include/MicoDrivers/MICODriverI2c.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/gpio_irq.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/gpio_irq.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/stm32f2xx_platform.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/Libraries/STM32F2xx_StdPeriph_Driver/src/stm32f2xx_gpio.c",
		"/Users/william/Develop/Clang_lib/ARMCC/include/string.h",
		"/Users/william/Develop/MiCO/include/MicoDrivers/MICODriverUART.h",
		"/Users/William/Develop/MiCO/Platform/Cortex-M3/crt0_EWARM.c",
		"/Users/William/Develop/MiCO/include/MicoDrivers/MICODriverRtc.h",
		"/Users/William/Develop/MiCO/include/MicoDrivers/MICODriverSpi.h"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"<open folders>",
			"",
			"<open folders>",
			"/Users/william/Develop/E-DICE",
			"",
			"<open folders>",
			"/Volumes/C/develop/MDV-STM32-407/EMB_STM32_407_wifi_lib_V2.0.0/",
			"/Volumes/C/develop/MDV-STM32-407/EMB_STM32_407_wifi_lib_V2.0.0/Project/复件 Data_Send&Recv",
			"/Volumes/C/develop/MDV-STM32-407/EMB_STM32_407_wifi_lib_V2.0.0/Project/STM32F4xx_StdPeriph_Examples"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"UART_WAKEUP_ENABLE",
			"FLASH_TYPE_EMBEDDED",
			"MiCOAPPDefine",
			"system_current_time_get",
			"CLI",
			"in",
			"init",
			"MICOInitNotificationCenter",
			"network_InitTypeDef_st",
			"MICORestoreMFG",
			"mico_system_para_read",
			"MICOStartSystemMonitor",
			"MICOReadConfiguration",
			"MICORestoreMFG",
			"system_current_time_get",
			"system_power_daemon_start",
			"system_context_init",
			"system_context_read",
			"system_notification_init",
			"AppDefine.h\"",
			"#include \"MICOAppDefine.h\"",
			"appRestoreDefault_callback",
			"MICOReadConfiguration",
			"CONFIG_DATA_SIZE",
			"mico_system_power_perform",
			"APPLICATION_WATCHDOG_TIMEOUT_SECONDS",
			"mico_system_notify_init",
			"SYS_State_t",
			"EASYLINK_BYPASS",
			"SYS_State_t",
			"mico_system_current_time_get",
			"system_version",
			"needsUpdate",
			"mico_system_current_time_get",
			"mico_write_ota_tbl",
			"mico_monitor",
			"sendNotifySYSWillPowerOff",
			"120000000",
			"sendNotifySYSWillPowerOff",
			"needsUpdate",
			"mico_easylink_ap_start",
			"mico_system_connect_wifi_normal",
			"micoNotify_WifiStatusHandler",
			"_sys_state_thread",
			"ConfigEasyLinkIsSuccess",
			"need_reboot",
			"ConfigIncommingJsonMessage",
			"remove_bonjour_for_easylink",
			"easylink_success",
			"mico_easylink_bonjour_update",
			"free",
			"is_service_match",
			"mico_easylink_bonjour_update",
			"remove_bonjour_for_easylink",
			"flashContentInRam.micoSystemConfig.localIp",
			"remove_bonjour_for_easylink",
			"easylink_success",
			"easylink_failed",
			"easylink_thread_should_exit",
			"KEY_SSID",
			"ConfigEasyLinkIsSuccess",
			"ConfigCreateReportJsonMessage",
			"ConfigIncommingJsonMessage",
			"MICOstartConfigServer",
			"MICOStartBonjourService",
			"ConfigELRecvAuthData",
			"easylink_sem",
			"uap_config_mode",
			"easylink_softap_should_start",
			"uap_config_mode",
			"easylinkIndentifier",
			"_LocalConfigRespondInComingMessage",
			"micoNotify_WiFIParaChangedHandler",
			"mico_notify_WiFI_PARA_CHANGED",
			"EasyLinkNotify_WiFIParaChangedHandler",
			"EasyLinkNotify_EasyLinkGetExtraDataHandler",
			"mdns_process_query",
			"mfi_bonjour_send",
			"mfi_bonjour_thread_handler",
			"mico_rtos_create_thread",
			"mico_rtos_pop_from_queue",
			"CFG_PRIO_BITS",
			"user_key1_init",
			"_user_key1_irq_handler",
			"user_key1_clicked_callback",
			"Standby_SEL",
			"platform_reset_wlan_powersave_clock",
			"host_platform_deinit_wlan_powersave_clock",
			"host_platform_sdio_transfer",
			"MicoSpiTransfer",
			"MICO_SPI_FLASH_CS",
			"mico_spi_flash",
			"USE_MICO_SPI_FLASH",
			"generic_sflash_command",
			"sflash_write_page",
			"spi",
			"spi_dma_transfer",
			"platform_gpio_set_alternate_function",
			"platform_spi_get_port_number",
			"spi_irq_handler",
			"DMA_ClearFlag",
			"DMA_ClearITPendingBit",
			"DMA_ClearITPendingBit\\",
			"DMA_ClearFlag",
			"DMA_ClearFlag\nDMA_ClearFlag",
			"DMA_ClearFlag",
			"DMA_IT_TCIF3",
			"clear_dma_interrupts",
			"dma_irq",
			"MICO_USE_WIFI_32K_CLOCK_MCO",
			"enable_clocl",
			"platform_watchdog_init",
			"GetLSIFrequency",
			"RX_PIN_WAKEUP_handler",
			"uart_number",
			"uart_peripheral_clock_functions",
			"platform_gpio_enable",
			"thread_wakeup",
			"sem_wakeup",
			"thread_wakeup",
			"wiced",
			"WICED",
			"convert_rtc_calendar_values_to_units_passed",
			"stm32f2_rtc_change_clock",
			"platform_power_down_hook",
			"platform_idle_hook",
			"platform_mcu_powersave_exit_notify",
			"wake_up_interrupt_notify"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"OSStatus",
			"MICO",
			"MICO_DISABLE_STDIO"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/William/Develop/MiCO/Demos/COM.MXCHIP.SPP/mico_system_config.h",
					"settings":
					{
						"buffer_size": 3628,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 683.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/William/Develop/MiCO/Demos/COM.MXCHIP.SPP/mico_app_context.h",
					"settings":
					{
						"buffer_size": 1776,
						"regions":
						{
						},
						"selection":
						[
							[
								1356,
								1356
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 168.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"settings":
					{
						"buffer_size": 3062,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										296,
										314
									],
									[
										670,
										688
									],
									[
										1056,
										1074
									],
									[
										1265,
										1283
									],
									[
										1609,
										1627
									],
									[
										2016,
										2034
									],
									[
										2287,
										2305
									],
									[
										2575,
										2593
									],
									[
										2950,
										2968
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								310,
								310
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/William/Develop/MiCO/include/MicoDrivers/MicoDriverUart.h",
					"settings":
					{
						"buffer_size": 4881,
						"regions":
						{
						},
						"selection":
						[
							[
								1996,
								1996
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 416.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/Users/william/Develop/MiCO/Platform/include/platform_peripheral.h",
					"settings":
					{
						"buffer_size": 24939,
						"regions":
						{
						},
						"selection":
						[
							[
								4463,
								4463
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1280.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.clang":
	{
		"height": 251.0
	},
	"output.exec":
	{
		"height": 100.0
	},
	"output.git":
	{
		"height": 100.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"micode",
				"MICO/MICODefine.h"
			],
			[
				"",
				"STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 285.0,
	"status_bar_visible": true
}
