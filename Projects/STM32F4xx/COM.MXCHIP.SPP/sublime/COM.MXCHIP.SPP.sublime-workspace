{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"mico_rtos_de",
				"mico_rtos_delete_thread(mico_thread_t *thread)	OSStatus"
			],
			[
				"up",
				"update_state_sem	mico_semaphore_t"
			],
			[
				"RECORD_",
				"RECORD_NORMAL	mdns_record_state_t"
			],
			[
				"RE",
				"RECORD_UPDATE	mdns_record_state_t"
			],
			[
				"s",
				"state	mdns_record_state_t"
			],
			[
				"REC",
				"RECORD_REMOVED	mdns_record_state_t"
			],
			[
				"strcm",
				"strcmp(const char *, const char *)	int"
			],
			[
				"MicoSp",
				"MicoSpiTransfer(const mico_spi_device_t *spi, const mico_spi_message_segment_t *segments, uint16_t number_of_segments)	OSStatus"
			],
			[
				"MicoSPI",
				"MicoSpiInitialize(const mico_spi_device_t *spi)	OSStatus"
			],
			[
				"mico_rtos_mu",
				"mico_rtos_lock_mutex(mico_mutex_t *mutex)	OSStatus"
			],
			[
				"kNot",
				"kNotInitializedErr	macro"
			],
			[
				"in",
				"initialized	bool"
			],
			[
				"kT",
				"kTypeErr	macro"
			],
			[
				"re",
				"require_noerr(ERR, LABEL)	macro"
			],
			[
				"platform_gpio_",
				"platform_gpio_irq_enable(const platform_gpio_t *gpio, platform_gpio_irq_trigger_t trigger, platform_gpio_irq_callback_t handler, void *arg)	OSStatus"
			],
			[
				"MICO_I2",
				"MICO_I2C_NONE	mico_i2c_t"
			],
			[
				"MICO_AD",
				"MICO_ADC_NONE	mico_adc_t"
			],
			[
				"MICO",
				"MICO_ADC_MAX	mico_adc_t"
			],
			[
				"ch",
				"chunkedDataBufferLen	unsigned int"
			],
			[
				"req",
				"require_action(X, LABEL, ACTION)	macro"
			],
			[
				"c",
				"onClearCallback	OSStatus (*)(struct _HTTPHeader_t *, void *)"
			],
			[
				"kUn",
				"kUnknownErr	macro"
			],
			[
				"uint",
				"uint32_t	typedef"
			],
			[
				"o",
				"onReceivedDataCallback	bool (*)(struct _HTTPHeader_t *)"
			],
			[
				"wla",
				"wLanUnConfigured	Config_State_t"
			],
			[
				"WL_",
				"WL_GPIO1_PIN	macro"
			],
			[
				"platform",
				"platform_log(M, ...)	macro"
			],
			[
				"mico",
				"mico_flash_t	typedef"
			],
			[
				"pi",
				"pin_rx	const platform_pin_mapping_t *"
			],
			[
				"MicoGpio",
				"MicoGpioEnableIRQ(mico_gpio_t gpio, mico_gpio_irq_trigger_t trigger, mico_gpio_irq_handler_t handler, void *arg)	OSStatus"
			],
			[
				"MicoGP",
				"MicoGpioEnableIRQ(mico_gpio_t gpio, mico_gpio_irq_trigger_t trigger, mico_gpio_irq_handler_t handler, void *arg)	OSStatus"
			],
			[
				"OUTPUT_OD",
				"OUTPUT_OPEN_DRAIN_NO_PULL	mico_gpio_config_t"
			],
			[
				"MICOSYS",
				"MicoSystemStandBy()	void"
			],
			[
				"MicoWd",
				"MicoWdgInitialize(uint32_t timeout)	OSStatus"
			],
			[
				"MicoR",
				"MicoRtcSetTime(mico_rtc_time_t *time)	OSStatus"
			],
			[
				"m",
				"month	uint8_t"
			],
			[
				"MICO_I",
				"MICO_I2C_CP	macro"
			],
			[
				"ke",
				"keyLength	int"
			],
			[
				"MicoGpioO",
				"MicoGpioOutputLow(mico_gpio_t gpio)	OSStatus"
			],
			[
				"k",
				"kBackoffErr	macro"
			],
			[
				"mico_rtos_in",
				"mico_rtos_init_semaphore(mico_semaphore_t *semaphore, int count)	OSStatus"
			],
			[
				"tm",
				"tm_wday	int"
			],
			[
				"tm_m",
				"tm_mon	int"
			],
			[
				"tm_",
				"tm_mday	int"
			],
			[
				"mico_rtos_d",
				"mico_rtos_delete_thread(mico_thread_t *thread)	OSStatus"
			],
			[
				"MICORe",
				"MICORemoveNotification(mico_notify_types_t notify_type, void *functionAddress)	OSStatus"
			],
			[
				"I",
				"INADDR_ANY	macro"
			],
			[
				"mico_th",
				"mico_thread_sleep	macro"
			],
			[
				"MICOWlan",
				"MICOWlanEnablePowerSave	macro"
			],
			[
				"MICOWlanS",
				"MICOWlanStopEasyLink	macro"
			],
			[
				"MICOW",
				"MICOWlanGetIPStatus	macro"
			],
			[
				"MICOWl",
				"MICOWlanGetIPStatus	macro"
			],
			[
				"MICOWlanGe",
				"MICOWlanGetIPStatus	macro"
			],
			[
				"MICOWlanStart",
				"MICOWlanStartAdv	macro"
			],
			[
				"micoGet",
				"micoGetMemoryInfo	macro"
			],
			[
				"DEF",
				"DEFAULT_REMOTE_UDP_PORT	macro"
			],
			[
				"send",
				"sendto(int sockfd, const void *buf, unsigned int len, int flags, const struct sockaddr_t *dest_addr, socklen_t addrlen)	int"
			],
			[
				"DHCP",
				"DHCP_Disable	DHCPOperationMode"
			],
			[
				"DHC",
				"DHCP_Client	DHCPOperationMode"
			],
			[
				"b",
				"BundleSeedID	char [32]"
			],
			[
				"ma",
				"manufacturer	char [32]"
			],
			[
				"n",
				"name	char [32]"
			],
			[
				"uin",
				"uint8_t	typedef"
			],
			[
				"Platform",
				"PlatformWDGReload()	void"
			],
			[
				"_us",
				"_uart_send_mutex	mico_mutex_t"
			],
			[
				"requi",
				"require(X, LABEL)	macro"
			],
			[
				"_uart",
				"_uart_send_mutex	mico_mutex_t"
			],
			[
				"mico_rtos_init_s",
				"mico_rtos_init_semaphore(mico_semaphore_t *semaphore, int count)	MxchipStatus"
			],
			[
				"mico_rtosge",
				"mico_rtos_get_semaphore(mico_semaphore_t *semaphore, unsigned int timeout_ms)	MxchipStatus"
			],
			[
				"MICO_",
				"MICO_NEVER_TIMEOUT	macro"
			],
			[
				"eState_",
				"eState_Wlan_Powerdown	SYS_State_t"
			],
			[
				"plat",
				"PlatformUartIn"
			],
			[
				"memc",
				"memcmp(const void *, const void *, size_t)	int"
			],
			[
				"mico_rtos",
				"mico_rtos_init_mutex(mico_mutex_t *mutex)	MxchipStatus"
			],
			[
				"mico_t",
				"mico_mutex_t	typedef"
			],
			[
				"mico_rt",
				"mico_rtos_set_semaphore(mico_semaphore_t *semaphore)	MxchipStatus"
			],
			[
				"DE",
				"DEAFULT_REMOTE_SERVER	macro"
			],
			[
				"fl",
				"flashContentInRam	flash_content_t"
			],
			[
				"kNo",
				"kNoErr	macro"
			],
			[
				"lo",
				"localTcpClient_fd	int *"
			],
			[
				"PlatformFlash",
				"PlatformFlashWrite(volatile uint32_t *FlashAddress, uint32_t *Data, uint32_t DataLength)	OSStatus"
			],
			[
				"Platformf",
				"PlatformFlashInitialize()	OSStatus"
			],
			[
				"kc",
				"kChecksumErr	macro"
			],
			[
				"kun",
				"kUnknownErr	macro"
			],
			[
				"kC",
				"kChecksumErr	macro"
			],
			[
				"f",
				"flashContentInRam	flash_content_t"
			],
			[
				"fla",
				"flashContentInRam	flash_content_t"
			],
			[
				"mico_l",
				"mico_log(M, ...)	macro"
			],
			[
				"Button_STANDBY_",
				"Button_STANDBY_PIN	macro"
			],
			[
				"GPIO_Read",
				"GPIO_ReadInputDataBit(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)	uint8_t"
			],
			[
				"easylink",
				"easylinkClient_fd	int"
			],
			[
				"mico_rtos_set",
				"mico_rtos_set_semaphore(mico_semaphore_t *semaphore)	MxchipStatus"
			],
			[
				"es",
				"eState_Software_Reset	SYS_State_t"
			],
			[
				"mico_rtos_init_",
				"mico_rtos_init_semaphore(mico_semaphore_t *semaphore, int count)	MxchipStatus"
			],
			[
				"mico_s",
				"mico_semaphore_t	typedef"
			],
			[
				"e",
				"easyLinkSkip	bool"
			],
			[
				"require_noerr",
				"require_noerr_action(ERR, LABEL, ACTION)	macro"
			],
			[
				"DH",
				"DHCP_Client	DHCPOperationMode"
			],
			[
				"kn",
				"kNoErr	macro"
			],
			[
				"requ",
				"require(X, LABEL)	macro"
			],
			[
				"l",
				"localIp	char [16]"
			],
			[
				"ip",
				"local_ip_addr	char [16]"
			],
			[
				"int",
				"int32_t	typedef"
			],
			[
				"d",
				"dhcpEnable	bool"
			],
			[
				"inet",
				"inet_ntoa(char *s, unsigned int x)	char *"
			],
			[
				"a",
				"allConfigured	config_type"
			],
			[
				"Clos",
				"CloseEasylink2()	int"
			],
			[
				"mico_notify_WIFI_S",
				"mico_notify_WIFI_STATUS_CHANGED	mico_notify_types_t"
			],
			[
				"us",
				"user_key	char [64]"
			],
			[
				"u",
				"user_key	char [64]"
			],
			[
				"key",
				"key_len	int"
			],
			[
				"MX",
				"MXCHIP_SUCCESS	MxchipStatus"
			],
			[
				"require_",
				"require_action(X, LABEL, ACTION)	macro"
			],
			[
				"strn",
				"strncpy(char *restrict, const char *restrict, size_t)	char *"
			],
			[
				"__str",
				"__strdup_trans_dot(char *src)	char *"
			],
			[
				"p",
				"protocol	char [32]"
			],
			[
				"temp",
				"temp2	WiFi_Status_Notify *"
			],
			[
				"kOper",
				"kNotPreparedErr	macro"
			],
			[
				"mico_rtos_i",
				"mico_rtos_init_mutex(mico_mutex_t *mutex)	MxchipStatus"
			],
			[
				"kU",
				"kUnknownErr	macro"
			],
			[
				"mico_rtos_ge",
				"mico_rtos_get_semaphore(mico_semaphore_t *semaphore, unsigned int timeout_ms)	MxchipStatus"
			],
			[
				"t",
				"txt_att	char *"
			],
			[
				"MF",
				"MFi_SERVICE_MFi	macro"
			],
			[
				"mico_re",
				"mico_rtos_init_mutex(mico_mutex_t *mutex)	MxchipStatus"
			],
			[
				"E",
				"ENABLE	FunctionalState"
			],
			[
				"ea",
				"eaBundleSeedID	char *"
			],
			[
				"support",
				"supports5GHzWiFi	bool"
			],
			[
				"supportsAirp",
				"supportsAirPrint	bool"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "/**\n******************************************************************************\n* @file    platform.c \n* @author  William Xu\n* @version V1.0.0\n* @date    05-May-2014\n* @brief   This file provides all MICO Peripherals mapping table and platform\n*          specific funcgtions.\n******************************************************************************\n*\n*  The MIT License\n*  Copyright (c) 2014 MXCHIP Inc.\n*\n*  Permission is hereby granted, free of charge, to any person obtaining a copy \n*  of this software and associated documentation files (the \"Software\"), to deal\n*  in the Software without restriction, including without limitation the rights \n*  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n*  copies of the Software, and to permit persons to whom the Software is furnished\n*  to do so, subject to the following conditions:\n*\n*  The above copyright notice and this permission notice shall be included in\n*  all copies or substantial portions of the Software.\n*\n*  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \n*  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \n*  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \n*  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n*  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR \n*  IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n******************************************************************************\n*/ \n\n#include \"stdio.h\"\n#include \"string.h\"\n\n#include \"MICOPlatform.h\"\n#include \"platform.h\"\n#include \"platform_peripheral.h\"\n#include \"platform_config.h\"\n#include \"PlatformLogging.h\"\n#include \"spi_flash_platform_interface.h\"\n#include \"wlan_platform_common.h\"\n\n//#ifdef USE_MiCOKit_EXT\n//#include \"rgb_led.h\"\n//#endif\n\n/******************************************************\n*                      Macros\n******************************************************/\n\n/******************************************************\n*                    Constants\n******************************************************/\n\n/******************************************************\n*                   Enumerations\n******************************************************/\n\n/******************************************************\n*                 Type Definitions\n******************************************************/\n\n/******************************************************\n*                    Structures\n******************************************************/\n\n/******************************************************\n*               Function Declarations\n******************************************************/\nextern WEAK void PlatformEasyLinkButtonClickedCallback(void);\nextern WEAK void PlatformStandbyButtonClickedCallback(void);\nextern WEAK void PlatformEasyLinkButtonLongPressedCallback(void);\n\n/******************************************************\n*               Variables Definitions\n******************************************************/\n\n/* This table maps STM32 pins to GPIO definitions on the schematic\n* A full pin definition is provided in <WICED-SDK>/include/platforms/BCM943362WCD4/platform.h\n*/\n\nstatic uint32_t _default_start_time = 0;\nstatic mico_timer_t _button_EL_timer;\n\nconst platform_gpio_t platform_gpio_pins[] =\n{\n  /* GPIOs for external use */\n  [MICO_GPIO_4]                       = { GPIOA, 15 },   \n  [MICO_GPIO_5]                       = { GPIOB,  3 },   \n  [MICO_GPIO_6]                       = { GPIOA, 11 },\n  [MICO_GPIO_7]                       = { GPIOB,  4 },\n  [MICO_GPIO_9]                       = { GPIOA,  4 },\n  [MICO_GPIO_10]                      = { GPIOB,  8 },\n  [MICO_GPIO_11]                      = { GPIOB,  9 },\n  [MICO_GPIO_14]                      = { GPIOC, 13 },\n  [MICO_GPIO_21]                      = { GPIOA,  2 }, //UART1_TX_DEBUG\n  [MICO_GPIO_22]                      = { GPIOA,  3 }, //UART1_RX_DEBUG\n  [MICO_GPIO_23]                      = { GPIOA,  0 }, //EasyLink_BUTTON\n  [MICO_GPIO_24]                      = { GPIOA,  1 },\n  [MICO_GPIO_25]                      = { GPIOB,  0 }, //spi_flash_spi_pins\n  [MICO_GPIO_26]                      = { GPIOB,  1 }, //spi_flash_spi_pins\n  [MICO_GPIO_27]                      = { GPIOA, 12 }, //spi_flash_spi_pins\n  [MICO_GPIO_28]                      = { GPIOA, 10 }, //spi_flash_spi_pins\n  [MICO_GPIO_29]                      = { GPIOA,  5 }, \n  [MICO_GPIO_30]                      = { GPIOB,  2 }, //BOOT\n  [MICO_GPIO_31]                      = { GPIOA,  7 },\n  [MICO_GPIO_32]                      = { GPIOB, 12 }, //MICO_SYS_LED\n  [MICO_GPIO_33]                      = { GPIOB, 13 }, //MFG\n};\n\nconst platform_pwm_t *platform_pwm_peripherals = NULL;\n\nconst platform_i2c_t platform_i2c_peripherals[] =\n{\n  [MICO_I2C_1] =\n  {\n    .port                         = I2C1,\n    .pin_scl                      = &platform_gpio_pins[MICO_GPIO_10],\n    .pin_sda                      = &platform_gpio_pins[MICO_GPIO_11],\n    .peripheral_clock_reg         = RCC_APB1Periph_I2C1,\n    .tx_dma                       = DMA1,\n    .tx_dma_peripheral_clock      = RCC_AHB1Periph_DMA1,\n    .tx_dma_stream                = DMA1_Stream7,\n    .rx_dma_stream                = DMA1_Stream5,\n    .tx_dma_stream_id             = 7,\n    .rx_dma_stream_id             = 5,\n    .tx_dma_channel               = DMA_Channel_1,\n    .rx_dma_channel               = DMA_Channel_1,\n    .gpio_af                      = GPIO_AF_I2C1\n  },\n};\n\nconst platform_uart_t platform_uart_peripherals[] =\n{\n  [MICO_UART_1] =\n  {\n    .port                         = USART2,\n    .pin_tx                       = &platform_gpio_pins[MICO_GPIO_21],\n    .pin_rx                       = &platform_gpio_pins[MICO_GPIO_22],\n    .pin_cts                      = NULL,\n    .pin_rts                      = NULL,\n    .tx_dma_config =\n    {\n      .controller                 = DMA1,\n      .stream                     = DMA1_Stream6,\n      .channel                    = DMA_Channel_4,\n      .irq_vector                 = DMA1_Stream6_IRQn,\n      .complete_flags             = DMA_HISR_TCIF6,\n      .error_flags                = ( DMA_HISR_TEIF6 | DMA_HISR_FEIF6 ),\n    },\n    .rx_dma_config =\n    {\n      .controller                 = DMA1,\n      .stream                     = DMA1_Stream5,\n      .channel                    = DMA_Channel_4,\n      .irq_vector                 = DMA1_Stream5_IRQn,\n      .complete_flags             = DMA_HISR_TCIF5,\n      .error_flags                = ( DMA_HISR_TEIF5 | DMA_HISR_FEIF5 | DMA_HISR_DMEIF5 ),\n    },\n  },\n  [MICO_UART_2] =\n  {\n    .port                         = USART1,\n    .pin_tx                       = &platform_gpio_pins[Arduino_TXD],\n    .pin_rx                       = &platform_gpio_pins[Arduino_RXD],\n    .pin_cts                      = NULL,\n    .pin_rts                      = NULL,\n    .tx_dma_config =\n    {\n      .controller                 = DMA2,\n      .stream                     = DMA2_Stream7,\n      .channel                    = DMA_Channel_4,\n      .irq_vector                 = DMA2_Stream7_IRQn,\n      .complete_flags             = DMA_HISR_TCIF7,\n      .error_flags                = ( DMA_HISR_TEIF7 | DMA_HISR_FEIF7 ),\n    },\n    .rx_dma_config =\n    {\n      .controller                 = DMA2,\n      .stream                     = DMA2_Stream2,\n      .channel                    = DMA_Channel_4,\n      .irq_vector                 = DMA2_Stream2_IRQn,\n      .complete_flags             = DMA_LISR_TCIF2,\n      .error_flags                = ( DMA_LISR_TEIF2 | DMA_LISR_FEIF2 | DMA_LISR_DMEIF2 ),\n    },\n  },\n};\n\nplatform_uart_driver_t platform_uart_drivers[MICO_UART_MAX];\n\nconst platform_spi_t platform_spi_peripherals[] =\n{\n  [MICO_SPI_1]  =\n  {\n    .port                         = SPI5,\n    .gpio_af                      = GPIO_AF6_SPI5,\n    .peripheral_clock_reg         = RCC_APB2Periph_SPI5,\n    .peripheral_clock_func        = RCC_APB2PeriphClockCmd,\n    .pin_mosi                     = &platform_gpio_pins[MICO_GPIO_28],\n    .pin_miso                     = &platform_gpio_pins[MICO_GPIO_27],\n    .pin_clock                    = &platform_gpio_pins[MICO_GPIO_25],\n    .tx_dma = \n    {\n      .controller                 = DMA2,\n      .stream                     = DMA2_Stream6,\n      .channel                    = DMA_Channel_7,\n      .irq_vector                 = DMA2_Stream6_IRQn,\n      .complete_flags             = DMA_HISR_TCIF6,\n      .error_flags                = ( DMA_HISR_TEIF6 | DMA_HISR_FEIF6 ),\n    },\n    .rx_dma = \n    {\n      .controller                 = DMA2,\n      .stream                     = DMA2_Stream5,\n      .channel                    = DMA_Channel_7,\n      .irq_vector                 = DMA2_Stream5_IRQn,\n      .complete_flags             = DMA_HISR_TCIF5,\n      .error_flags                = ( DMA_HISR_TEIF5 | DMA_HISR_FEIF5 | DMA_HISR_DMEIF5 ),\n    },\n  }\n};\n\nplatform_spi_driver_t platform_spi_drivers[MICO_SPI_MAX];\n\n\n\nconst platform_flash_t platform_flash_peripherals[] =\n{\n  [MICO_SPI_FLASH] =\n  {\n    .flash_type                   = FLASH_TYPE_SPI,\n    .flash_start_addr             = 0x000000,\n    .flash_length                 = 0x200000,\n  },\n  [MICO_INTERNAL_FLASH] =\n  {\n    .flash_type                   = FLASH_TYPE_INTERNAL,\n    .flash_start_addr             = 0x08000000,\n    .flash_length                 = 0x80000,\n  },\n};\n\nplatform_flash_driver_t platform_flash_drivers[MICO_FLASH_MAX];\n\n\n\n#if defined ( USE_MICO_SPI_FLASH )\nconst mico_spi_device_t mico_spi_flash =\n{\n    .port        = MICO_SPI_1,\n    .chip_select = MICO_GPIO_26,\n    .speed       = 40000000,\n    .mode        = (SPI_CLOCK_RISING_EDGE | SPI_CLOCK_IDLE_HIGH | SPI_USE_DMA | SPI_MSB_FIRST),\n    .bits        = 8\n};\n#endif\n\nconst platform_adc_t platform_adc_peripherals[] =\n{\n  // [MICO_ADC_1] = NULL,\n  [MICO_ADC_1] = {\n    .port = ADC1,\n    . channel = ADC_Channel_4,\n    .adc_peripheral_clock = RCC_APB2Periph_ADC1, \n    .rank = 1, \n    .pin = (platform_gpio_t*)&platform_gpio_pins[MICO_GPIO_9]\n  },\n  [MICO_ADC_2] = {\n    .port = ADC1,\n    .channel = ADC_Channel_1,\n    .adc_peripheral_clock = RCC_APB2Periph_ADC1,\n    .rank = 1, \n    .pin = (platform_gpio_t*)&platform_gpio_pins[MICO_GPIO_24]\n  }\n};\n\n/* Wi-Fi control pins. Used by platform/MCU/wlan_platform_common.c\n*/\nconst platform_gpio_t wifi_control_pins[] =\n{\n  [WIFI_PIN_POWER       ] = { GPIOB, 6 },\n};\n\n/* Wi-Fi SDIO bus pins. Used by platform/MCU/STM32F2xx/EMW1062_driver/wlan_SDIO.c */\nconst platform_gpio_t wifi_sdio_pins[] =\n{\n#ifdef SDIO_1_BIT\n  [WIFI_PIN_SDIO_IRQ    ] = { GPIOA,  8 },\n#endif\n  [WIFI_PIN_SDIO_CLK    ] = { GPIOB, 15 },\n  [WIFI_PIN_SDIO_CMD    ] = { GPIOA,  6 },\n  [WIFI_PIN_SDIO_D0     ] = { GPIOB,  7 },\n#ifndef SDIO_1_BIT\n  [WIFI_PIN_SDIO_D1     ] = { GPIOA,  8 },\n  [WIFI_PIN_SDIO_D2     ] = { GPIOA,  9 },\n  [WIFI_PIN_SDIO_D3     ] = { GPIOB,  5 },\n#endif\n};\n\n\n/******************************************************\n*           Interrupt Handler Definitions\n******************************************************/\n/* USART2 -> MICO_UART_1 */\nMICO_RTOS_DEFINE_ISR( USART2_IRQHandler )\n{\n  platform_uart_irq( &platform_uart_drivers[MICO_UART_1] );\n}\n\nMICO_RTOS_DEFINE_ISR( DMA1_Stream6_IRQHandler )\n{\n  platform_uart_tx_dma_irq( &platform_uart_drivers[MICO_UART_1] );\n}\n\nMICO_RTOS_DEFINE_ISR( DMA1_Stream5_IRQHandler )\n{\n  platform_uart_rx_dma_irq( &platform_uart_drivers[MICO_UART_1] );\n}\n\n/* USART1 -> MICO_UART_2 */\nMICO_RTOS_DEFINE_ISR( USART1_IRQHandler )\n{\n  platform_uart_irq( &platform_uart_drivers[MICO_UART_2] );\n}\n\nMICO_RTOS_DEFINE_ISR( DMA2_Stream7_IRQHandler )\n{\n  platform_uart_tx_dma_irq( &platform_uart_drivers[MICO_UART_2] );\n}\n\nMICO_RTOS_DEFINE_ISR( DMA2_Stream2_IRQHandler )\n{\n  platform_uart_rx_dma_irq( &platform_uart_drivers[MICO_UART_2] );\n}\n\nvoid platform_init_peripheral_irq_priorities( void )\n{\n  /* Interrupt priority setup. Called by WICED/platform/MCU/STM32F2xx/platform_init.c */\n  NVIC_SetPriority( RTC_WKUP_IRQn    ,  1 ); /* RTC Wake-up event   */\n  NVIC_SetPriority( SDIO_IRQn        ,  2 ); /* WLAN SDIO           */\n  NVIC_SetPriority( DMA2_Stream3_IRQn,  3 ); /* WLAN SDIO DMA       */\n  NVIC_SetPriority( USART1_IRQn      ,  6 ); /* MICO_UART_1         */\n  // NVIC_SetPriority( USART2_IRQn      ,  6 ); /* MICO_UART_2         */\n  NVIC_SetPriority( DMA1_Stream6_IRQn,  7 ); /* MICO_UART_1 TX DMA  */\n  NVIC_SetPriority( DMA1_Stream5_IRQn,  7 ); /* MICO_UART_1 RX DMA  */\n  // NVIC_SetPriority( DMA2_Stream7_IRQn,  7 ); /* MICO_UART_2 TX DMA  */\n  // NVIC_SetPriority( DMA2_Stream2_IRQn,  7 ); /* MICO_UART_2 RX DMA  */\n  NVIC_SetPriority( EXTI0_IRQn       , 14 ); /* GPIO                */\n  NVIC_SetPriority( EXTI1_IRQn       , 14 ); /* GPIO                */\n  NVIC_SetPriority( EXTI2_IRQn       , 14 ); /* GPIO                */\n  NVIC_SetPriority( EXTI3_IRQn       , 14 ); /* GPIO                */\n  NVIC_SetPriority( EXTI4_IRQn       , 14 ); /* GPIO                */\n  NVIC_SetPriority( EXTI9_5_IRQn     , 14 ); /* GPIO                */\n  NVIC_SetPriority( EXTI15_10_IRQn   , 14 ); /* GPIO                */\n}\n\n\n/******************************************************\n*               Function Definitions\n******************************************************/\n\nstatic void _button_EL_irq_handler( void* arg )\n{\n  (void)(arg);\n  int interval = -1;\n  \n  if ( MicoGpioInputGet( (mico_gpio_t)EasyLink_BUTTON ) == 1 ) {\n    _default_start_time = mico_get_time()+1;\n    mico_start_timer(&_button_EL_timer);\n  } else {\n    interval = mico_get_time() + 1 - _default_start_time;\n    if ( (_default_start_time != 0) && interval > 50 && interval < RestoreDefault_TimeOut){\n      /* EasyLink button clicked once */\n      PlatformEasyLinkButtonClickedCallback();\n    }\n    mico_stop_timer(&_button_EL_timer);\n    _default_start_time = 0;\n  }\n}\n\nstatic void _button_EL_Timeout_handler( void* arg )\n{\n  (void)(arg);\n  _default_start_time = 0;\n  PlatformEasyLinkButtonLongPressedCallback();\n}\n\nvoid init_platform( void )\n{\n   MicoGpioInitialize( (mico_gpio_t)MICO_SYS_LED, OUTPUT_PUSH_PULL );\n   MicoGpioOutputLow( (mico_gpio_t)MICO_SYS_LED );\n   MicoGpioInitialize( (mico_gpio_t)MICO_RF_LED, OUTPUT_OPEN_DRAIN_NO_PULL );\n   MicoGpioOutputHigh( (mico_gpio_t)MICO_RF_LED );\n  \n   //  Initialise EasyLink buttons\n   MicoGpioInitialize( (mico_gpio_t)EasyLink_BUTTON, INPUT_HIGH_IMPEDANCE );\n   mico_init_timer(&_button_EL_timer, RestoreDefault_TimeOut, _button_EL_Timeout_handler, NULL);\n   MicoGpioEnableIRQ( (mico_gpio_t)EasyLink_BUTTON, IRQ_TRIGGER_BOTH_EDGES, _button_EL_irq_handler, NULL );\n   \n#ifdef USE_MiCOKit_EXT\n  MicoGpioInitialize( Arduino_D9, OUTPUT_PUSH_PULL );\n  MicoGpioOutputLow( Arduino_D9 );\n  \n  //hsb_led_open( 0, 0, 0 );\n\n#endif\n\n   MicoFlashInitialize( MICO_SPI_FLASH );\n}\n\nvoid init_platform_bootloader( void )\n{\n  MicoGpioInitialize( (mico_gpio_t)MICO_SYS_LED, OUTPUT_PUSH_PULL );\n  MicoGpioOutputLow( (mico_gpio_t)MICO_SYS_LED );\n  MicoGpioInitialize( (mico_gpio_t)MICO_RF_LED, OUTPUT_OPEN_DRAIN_NO_PULL );\n  MicoGpioOutputHigh( (mico_gpio_t)MICO_RF_LED );\n  \n  MicoGpioInitialize((mico_gpio_t)BOOT_SEL, INPUT_PULL_UP);\n  MicoGpioInitialize((mico_gpio_t)MFG_SEL, INPUT_HIGH_IMPEDANCE);\n  \n#ifdef USE_MiCOKit_EXT\n  MicoGpioInitialize( Arduino_D9, OUTPUT_PUSH_PULL );\n  MicoGpioOutputLow( Arduino_D9 );\n#endif\n}\n\nvoid MicoSysLed(bool onoff)\n{\n    if (onoff) {\n        MicoGpioOutputLow( (mico_gpio_t)MICO_SYS_LED );\n    } else {\n        MicoGpioOutputHigh( (mico_gpio_t)MICO_SYS_LED );\n    }\n}\n\n// Only one led on base board, so use system led as RF led.\nvoid MicoRfLed(bool onoff)\n{\n    if (onoff) {\n        MicoSysLed(true);\n    } else {\n        MicoSysLed(false);\n    }\n}\n\n// add long press key2 on ext-board when restart to enter MFG MODE\nbool MicoShouldEnterMFGMode(void)\n{\n#ifdef USE_MiCOKit_EXT\n  if( (MicoGpioInputGet((mico_gpio_t)BOOT_SEL)==false && MicoGpioInputGet((mico_gpio_t)MFG_SEL)==false) ||\n     (MicoGpioInputGet((mico_gpio_t)Arduino_D5) == false) )\n#else\n  if( MicoGpioInputGet((mico_gpio_t)BOOT_SEL)==false && MicoGpioInputGet((mico_gpio_t)MFG_SEL)==false )\n#endif\n  {\n    return true;\n  }\n  else{\n    return false;\n  }\n}\n\n// bootloader mode: SW1=ON, SW2=OFF\nbool MicoShouldEnterBootloader(void)\n{\n  if(MicoGpioInputGet((mico_gpio_t)BOOT_SEL)==false && MicoGpioInputGet((mico_gpio_t)MFG_SEL)==true)\n    return true;\n  else\n    return false;\n}\n\n",
			"file": "/Users/William/Develop/MiCO/Board/MiCOKit-3288/platform.c",
			"file_size": 16848,
			"file_write_time": 1434076157000000,
			"settings":
			{
				"buffer_size": 16396,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_i2c.c",
			"settings":
			{
				"buffer_size": 26120,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/William/Develop/MiCO/Support/MDNSUtils.c",
			"settings":
			{
				"buffer_size": 22224,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/William/Develop/MiCO/Support/MDNSUtils.h",
			"settings":
			{
				"buffer_size": 4089,
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Searching 1878 files for \"mico_create_event_fd\" (whole word)\n\n/Users/William/Develop/MiCO/include/MICORTOS.h:\n  506  bool mico_is_timer_running( mico_timer_t* timer );\n  507  \n  508: int mico_create_event_fd(mico_event handle);\n  509  int mico_delete_event_fd(int fd);\n  510  \n\n/Users/William/Develop/MiCO/Support/MDNSUtils.c:\n  658      mico_rtos_init_semaphore( &update_state_sem, 1 );\n  659  \n  660:   update_state_fd = mico_create_event_fd( update_state_sem );\n  661  \n  662    memset( available_services, 0x0, sizeof( available_services ) );\n\n/Users/William/Develop/MiCO/Demos/COM.MXCHIP.SPP/LocalTcpServer.c:\n  105    err = socket_queue_create(Context, &queue);\n  106    require_noerr( err, exit );\n  107:   eventFd = mico_create_event_fd(queue);\n  108    if (eventFd < 0) {\n  109      server_log(\"create event fd error\");\n\n/Users/William/Develop/MiCO/Demos/COM.MXCHIP.SPP/RemoteTcpClient.c:\n   99        err = socket_queue_create(Context, &queue);\n  100        require_noerr( err, exit );\n  101:       eventFd = mico_create_event_fd(queue);\n  102        if (eventFd < 0) {\n  103          client_log(\"create event fd error\");\n\n4 matches across 4 files\n",
			"settings":
			{
				"buffer_size": 1158,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/Users/William/Develop/MiCO/Demos/COM.MXCHIP.SPP/LocalTcpServer.c",
			"settings":
			{
				"buffer_size": 5368,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_uart.c",
			"settings":
			{
				"buffer_size": 26441,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
			[
				"",
				"Package Control: Install Package"
			],
			[
				"git",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"v",
				"View: Toggle Side Bar"
			],
			[
				"Cscope:Look up symbol",
				"Cscope: Look up symbol"
			],
			[
				":",
				"View: Toggle Tabs"
			],
			[
				":q",
				"Set Syntax: SQL"
			],
			[
				"Package Control: install		",
				"Package Control: Install Package"
			],
			[
				"Snippet: ",
				"Snippet: Lorem ipsum"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/William/Develop/MiCO/Projects/STM32F4xx/COM.MXCHIP.SPP/sublime/COM.MXCHIP.SPP.sublime-project",
		"/Users/William/Develop/MiCO/include/MICORTOS.h",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3165/platform.c",
		"/Users/William/Develop/MiCO/Platform/MCU/mico_platform_common.c",
		"/Users/william/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_mcu_peripheral.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_spi.c",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3288/platform.h",
		"/Users/William/Develop/MiCO/Platform/include/platform_peripheral.h",
		"/Users/William/Develop/MiCO/Platform/MCU/wlan_platform_common.c",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3162/platform.c",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3288/platform.c",
		"/Users/William/Develop/MiCO/Platform/Drivers/spi_flash/spi_flash_platform.c",
		"/Users/william/Develop/MiCO/Platform/include/platform_peripheral.h",
		"/Users/William/Develop/MiCO/include/MicoPlatform.h",
		"/Users/William/Develop/MiCO/MICO/MICOEntrance.c",
		"/Users/William/Develop/MiCO/MICO/EasyLink/EasyLink.c",
		"/Users/William/Develop/MiCO/MICO/MICONotificationCenter.c",
		"/Users/William/Develop/MiCO/Demos/COM.APPLE.HOMEKIT/HomeKitServer.c",
		"/Users/William/Develop/MiCO/Demos/COM.APPLE.HOMEKIT/HomeKitUserInterface.c",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3162/platform_config.h",
		"/Users/William/Develop/MiCO/Board/MiCOKit-F205/platform.c",
		"/Users/William/Develop/MiCO/Board/EMW5088/platform.c",
		"/Users/William/Develop/MiCO/Platform/MCU/MX1101/peripherals/Libraries/inc/irqs.h",
		"/Users/William/Develop/MiCO/Platform/MCU/MX1101/platform_init.c",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3165/platform_config.h",
		"/Users/William/Develop/MiCO/include/Debug.h",
		"/Users/William/Develop/MiCO/Platform/MCU/MX1101/peripherals/platform_i2c.c",
		"/Users/William/Develop/MiCO/Platform/MCU/MX1101/peripherals/platform_mcu_powersave.c",
		"/Users/William/Develop/MiCO/Platform/MCU/MX1101/peripherals/platform_pwm.c",
		"/Users/William/Develop/MiCO/Platform/MCU/MX1101/peripherals/platform_rng.c",
		"/Users/William/Develop/MiCO/Platform/MCU/MX1101/peripherals/platform_spi.c",
		"/Users/William/Develop/MiCO/Platform/MCU/MX1101/peripherals/platform_adc.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/platform_mcu_peripheral.h",
		"/Users/William/Develop/MiCO/Platform/Drivers/spi_flash/spi_flash.c",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3165/platform.h",
		"/Users/william/Develop/MiCO/Platform/drivers/spi_flash/spi_flash.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_mcu_peripheral.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_flash.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_uart.c",
		"/Users/William/Develop/MiCO/MICO/MICOMfgtest.c",
		"/Users/william/Develop/MiCO/Board/MiCOKit-3288/platform.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F2xx/peripherals/platform_flash.c",
		"/Users/william/Develop/MiCO/include/MicoDrivers/MICODriverI2c.h",
		"/Users/William/Develop/MiCO/Platform/include/wlan_platform_common.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/EMW1062_Driver/wlan_bus_sdio.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/EMW1088_Driver/wlan_bus.c",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/Wi-Fi_Bus_Driver/wlan_bus_sdio.c",
		"/Users/william/Develop/MiCO/Platform/include/wlan_platform_common.h",
		"/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/Wi-Fi_Bus_Driver/read_wifi_firmware.c",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3288/platform_config.h",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3288/platform_spi_flash.c",
		"/Users/william/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/Libraries/STM32F4xx_StdPeriph_Driver/inc/stm32f4xx_gpio.h",
		"/Users/William/Develop/MiCO/Board/MiCOKit-3165/platform_spi_flash.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICOEntrance.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/EasyLink/EasyLink.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOConfigDelegate.c",
		"/Users/William/Library/Application Support/Sublime Text 2/Packages/SublimeClang/clang/include/stddef.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOBonjour.c",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoPlatform.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Board/MiCOKit-3088/platform.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Support/SocketUtils.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/MCU/MX1101/peripherals/Libraries/inc/uart.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/MCU/STM32F2xx/peripherals/MicoDriverUart.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Support/SocketUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/MCU/STM32F2xx/RVMDK/startup_stm32f2xx_RVMDK.s",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Projects/STM32F4xx/COM.MXCHIP.SPP/sublime/COM.MXCHIP.SPP.sublime-project",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/STM32F2xx_Drv/startup_stm32f2xx_RVMDK.s",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M4/STM32F4xx/STM32F4xx_Drv/startup_stm32f2xx_IAR.s",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOAppEntrance.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/IDEs/Keil/patch_keil.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/stm32f2xx_platform.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/JSON-C/json_util.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/EMW3162/platform.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/STM32F2xx_Drv/startup_stm32f2xx_bootloader_IAR.s",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICODefine.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/Common.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/MICO_EVB_1/platform.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/STM32F2xx_Drv/STM32F2xx_StdPeriph_Driver/CMSIS/core_cmInstr.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoAlgorithm.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MICORTOS.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoSocket.h",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/Common.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/StringUtils.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/StringUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/crt0_IAR.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/STM32F2xx_Drv/startup_stm32f2xx_IAR.s",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICOMfgtest.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/crt0.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/HTTPUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICOParaStorage.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/HTTPUtils.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICOConfigServer.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/FatFs/src/ff_gen_drv.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/FatFs/src/diskio.h",
		"/Users/william/Develop/Clang_lib/ARMCC/include/stdio.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.SPP/MICOAppDefine.h",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Platform/EMW3162/platform_common_config.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.MXCHIP.HA/HaProtocol.c",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoRTOS.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICONotificationCenter.c",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2XX/STM32F2XX_Drv/STM32F2xx_StdPeriph_Driver/inc/stm32f2xx_rcc.h",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoWlan.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/External/FatFs/src/integer.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.Apple.HomeKit/HomeKitUserInterface.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.Apple.HomeKit/MICOAppDefine.h",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/include/MICO.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Demos/COM.Apple.HomeKit/MicoDefaults.h",
		"/Users/william/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/HTTPUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/MICO_EVB_1/platform.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoWlan.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/MICONotificationCenter.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/MICO/EasyLink/EasyLink.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/include/platform_sleep.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/MicoDriverFlash.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/hardfault.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/rtc.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/rtc.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/Cortex-M3/STM32F2xx/wlan_platform.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/Common/IAR/stdio_IAR.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/EMW3162/platform.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/include/PlatformLogging.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/EMW3162/platform_common_config.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/EMW3162/read_wifi_firmware.c",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/MicoPlatform.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/support/TimeUtils.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/include/Mico.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Platform/EMW3162/platform_internal_gpio.h",
		"/Users/William/Develop/mxchipWNet Pro Demo@EMW316x/Library/inc/MICOWlan.h"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
			"<open folders>",
			"",
			"<open folders>",
			"/Users/william/Develop/E-DICE",
			"",
			"<open folders>",
			"/Volumes/C/develop/MDV-STM32-407/EMB_STM32_407_wifi_lib_V2.0.0/",
			"/Volumes/C/develop/MDV-STM32-407/EMB_STM32_407_wifi_lib_V2.0.0/Project/复件 Data_Send&Recv",
			"/Volumes/C/develop/MDV-STM32-407/EMB_STM32_407_wifi_lib_V2.0.0/Project/STM32F4xx_StdPeriph_Examples"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"mfi_bonjour_thread_handler",
			"count_down",
			"MFi_SERVICE_QUERY_NAME",
			"dns_record_t",
			"bonjour_remove_record",
			"bonjour_send",
			"mico_create_event_fd",
			"dns_compare_name_to_string",
			"dns_compare_name_to_string( name, available_services[b].hostname )",
			"dns_compare_name_to_string",
			"mfi_mdns_handler",
			"suspend_bonjour_service",
			"bonjour_service_remove",
			"stop_bonjour_service",
			"_interface",
			"dns_compare_name_to_string",
			"mfi_bonjour_remove_record",
			"available_service_count",
			"bonjour_mutex",
			"i2c_rx_no_dma",
			"i2c_tx_no_dma",
			"i2c_tx_no_dma\ni2c_tx_no_dma",
			"i2c_tx_no_dma",
			"mico_notify_SYS_WILL_POWER_OFF",
			"mico_notify_SYS_WILL_POWER_OFF_function",
			"sendNotifySYSWillPowerOff",
			"sys_state_change_sem",
			"_button_EL_irq_handler",
			"USB_DETECT",
			"max_syscall_int_prio",
			"MMFLT_IRQn_PRIO",
			"USE_MICO_SPI_FLASH",
			"EMW1062",
			"MICO_DEFAULT_TICK_RATE_HZ",
			"MCU_CLOCK_HZ",
			"generic_sflash_command",
			"spi_baudrate_prescalers",
			"calculate_prescaler",
			"sflash_platform_send_recv",
			"generic_sflash_command",
			"flash",
			"platform_uart_stop_bits_t",
			"platform_spi_slave_transfer_status_t",
			"i2c",
			"ssid_get",
			"get_line",
			"host_enable_oob_interrupt",
			"host_platform_get_oob_interrupt_pin",
			"bootloader_start",
			"sdio_int_pin_irq_handler",
			"sdio_oob_irq_handler",
			"sdio_enable_it_irq",
			"sdio_enable_bus_irq",
			"host_enable_oob_interrupt",
			"FLASH_PIN_SPI_CS",
			"wiced_platform_notify_irq",
			"sdio_oob_irq_handler",
			"WL_GPIO1",
			"sdio_irq",
			"MICO_I2C_1",
			"MICO_UNUSED",
			"platform_i2c_peripherals",
			"platform_i2c_per",
			"BuartExFifoInit",
			"SocketAccept",
			"MicoSystemStandBy",
			"hard_fault_handler_c",
			"init_platform",
			"mico_get_time",
			"sys_command",
			"sys_command.o",
			"fwrite",
			"fopen",
			"freopen",
			"fopen",
			"mico_mutex_t",
			"RTC_WKUP_irq",
			"bootloader_start",
			"WEAK",
			"ICC",
			"EXTI3_IRQHandler",
			"InitMd5",
			"sys_state_change_sem",
			"PlatformEasyLinkButtonLongPressedCallback",
			"str",
			"strdump",
			"strd",
			"strdump",
			"memrlen",
			"strnlen",
			"memrlen",
			"size_t",
			"READ_LENGTH",
			"CR",
			"findChunkedDataLength",
			"1500",
			"findChunkedDataLength",
			"realloc",
			"findChunkedDataLength",
			"->chunkedData =",
			"chunk",
			"findChunkedDataLength",
			"HTTPHeaderParse",
			"chunck",
			"inHeader->chunkedData =",
			"inHeader->chunkedData",
			"otaDataPtr",
			"HTTPHeaderClear",
			"unlock",
			"dataEndedbyClose",
			"onClear",
			"flashStorageAddress",
			"  /* For MXCHIP OTA function, store extra data to OTA data temporary */\n//   err = HTTPGetHeaderField( inHeader->buf, inHeader->len, \"Content-Type\", NULL, NULL, &value, &valueSize, NULL );\n\n//   if(err == kNoErr && strnicmpx( value, valueSize, kMIMEType_MXCHIP_OTA ) == 0){\n// #ifdef MICO_FLASH_FOR_UPDATE  \n//     http_utils_log(\"Receive OTA data!\");    \n//     flashStorageAddress = UPDATE_START_ADDRESS;\n//     err = MicoFlashInitialize( MICO_FLASH_FOR_UPDATE );\n//     require_noerr(err, exit);\n//     err = MicoFlashErase(MICO_FLASH_FOR_UPDATE, UPDATE_START_ADDRESS, UPDATE_END_ADDRESS);\n//     require_noerr(err, exit);\n//     err = MicoFlashWrite(MICO_FLASH_FOR_UPDATE, &flashStorageAddress, (uint8_t *)end, inHeader->extraDataLen);\n//     require_noerr(err, exit);\n// #else\n//     http_utils_log(\"OTA flash memory is not existed!\");\n//     err = kUnsupportedErr;\n// #endif\n//     goto exit;\n//   }",
			"HTTPHeaderClear\nHTTPHeaderClear",
			"HTTPHeaderClear",
			"dataEndedbyClose",
			"onReceivedData",
			"writeToFlash",
			"onReceivedData",
			"crea",
			"mico_notify_WIFI_SCAN_COMPLETE_function",
			"HTTPHeaderCreate",
			"_ConnectToMfgAP",
			"stop_mode_power_down_hook",
			"_button_STANDBY_irq_handler",
			"%f",
			"lf",
			"_cleanEasyLinkResource"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"MICO",
			"MICO_DISABLE_STDIO"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/Users/William/Develop/MiCO/Board/MiCOKit-3288/platform.c",
					"settings":
					{
						"buffer_size": 16396,
						"regions":
						{
						},
						"selection":
						[
							[
								11841,
								11093
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5372.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_i2c.c",
					"settings":
					{
						"buffer_size": 26120,
						"regions":
						{
						},
						"selection":
						[
							[
								25294,
								25294
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11981.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/William/Develop/MiCO/Support/MDNSUtils.c",
					"settings":
					{
						"buffer_size": 22224,
						"regions":
						{
						},
						"selection":
						[
							[
								18280,
								18280
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 11128.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/Users/William/Develop/MiCO/Support/MDNSUtils.h",
					"settings":
					{
						"buffer_size": 4089,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 2022.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"settings":
					{
						"buffer_size": 1158,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										187,
										207
									],
									[
										423,
										443
									],
									[
										724,
										744
									],
									[
										1019,
										1039
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								740,
								740
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/Users/William/Develop/MiCO/Demos/COM.MXCHIP.SPP/LocalTcpServer.c",
					"settings":
					{
						"buffer_size": 5368,
						"regions":
						{
						},
						"selection":
						[
							[
								3567,
								3572
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1388.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "/Users/William/Develop/MiCO/Platform/MCU/STM32F4xx/peripherals/platform_uart.c",
					"settings":
					{
						"buffer_size": 26441,
						"regions":
						{
						},
						"selection":
						[
							[
								15478,
								15506
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7134.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.clang":
	{
		"height": 146.0
	},
	"output.exec":
	{
		"height": 100.0
	},
	"output.git":
	{
		"height": 100.0
	},
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"micode",
				"MICO/MICODefine.h"
			],
			[
				"",
				"STM32F2xx_StdPeriph_Driver/src/stm32f2xx_i2c.c"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 248.0,
	"status_bar_visible": true
}
